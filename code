// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract PollingSystem {

    struct Poll {
        string title;
        string[] options;
        uint endTime;
        mapping(uint => uint) voteCounts; 
        mapping(address => bool) hasVoted;
        bool exists;
    }

    mapping(uint => Poll) public polls;
    uint public pollCount = 0;

    function createPoll(string memory _title, string[] memory _options, uint _durationInMinutes) public {
        require(_options.length >= 2, "Need at least 2 options");
        pollCount++;
        Poll storage p = polls[pollCount];
        p.title = _title;
        p.options = _options;
        p.endTime = block.timestamp + (_durationInMinutes * 1 seconds);
        p.exists = true;
    }

    function vote(uint pollId, uint optionIndex) public {
        require(polls[pollId].exists, "Poll does not exist");
        Poll storage poll = polls[pollId];
        require(block.timestamp < poll.endTime, "Voting period has ended");
        require(!poll.hasVoted[msg.sender], "You have already voted");
        require(optionIndex < poll.options.length, "Invalid option");

        poll.voteCounts[optionIndex]++;
        poll.hasVoted[msg.sender] = true;
    }

    function getWinningOption(uint pollId) public view returns (string memory winner, uint voteCount) {
        require(polls[pollId].exists, "Poll does not exist");
        Poll storage poll = polls[pollId];
        require(block.timestamp >= poll.endTime, "Poll is still ongoing");

        uint maxVotes = 0;
        uint winningIndex = 0;
        for (uint i = 0; i < poll.options.length; i++) {
            if (poll.voteCounts[i] > maxVotes) {
                maxVotes = poll.voteCounts[i];
                winningIndex = i;
            }
        }
        return (poll.options[winningIndex], maxVotes);
    }

    function getPollOptions(uint pollId) public view returns (string[] memory) {
        require(polls[pollId].exists, "Poll does not exist");
        return polls[pollId].options;
    }

    function getPollInfo(uint pollId) public view returns (string memory, uint) {
        require(polls[pollId].exists, "Poll does not exist");
        Poll storage poll = polls[pollId];
        return (poll.title, poll.endTime);
    }
}
